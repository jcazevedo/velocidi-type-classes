#+TITLE: Type classes in Scala
#+SUBTITLE: Velocidi Tech Talks

#+AUTHOR: Joao Azevedo

#+DATE: November 16, 2018

* Outline

1. Polymorphism
2. Type classes
3. Running example
4. Derivation of type classes
5. Shapeless
6. Generic derivation of type classes
7. Common issues
8. Configuring derivation
9. Other resources

* Polymorphism

#+BEGIN_QUOTE
In computer science, a type class is a type system construct that supports ad hoc polymorphism. This
is achieved by adding constraints to type variables in parametrically polymorphic types.
                                                                                        -- [[https://en.wikipedia.org/wiki/Type_class][Wikipedia]]
#+END_QUOTE

* Parametric polymorphism

Parametric polymorphism allows a function or data type to handle values uniformly without depending
on their type.

#+BEGIN_SRC scala
def length[A](xs: List[A]) = xs match {
  case Nil => 0
  case _ :: t => 1 + length(t)
}

val l1: List[Int]    = List(1, 2, 3)
val l2: List[String] = List("a", "b", "c")
val l3: List[Double] = List(1.0, 2.0, 3.0)

length(l1) //// => 3
length(l2) //// => 3
length(l3) //// => 3
#+END_SRC

* Parametric polymorphism

Parametric polymorphism allows a function or data type to handle values uniformly without depending
on their type.

#+BEGIN_SRC scala
sealed trait List[+A]
case object Nil extends List[Nothing]
case class Cons[A](head: A, tail: List[A]) extends List[A]

val l1: List[Int]    = Cons(1, Cons(2, Cons(3, Nil)))
val l2: List[String] = Cons("a", Cons("b", Cons("c", Nil)))
val l3: List[Double] = Cons(1.0, Cons(2.0, Cons(3.0, Nil)))
#+END_SRC

* Subtype polymorphism

Subtyping allows a function to take an object of a certain type, but also work correctly for
subtypes.

#+BEGIN_SRC scala
trait Animal {
  def talk: String
}

class Cat extends Animal {
  def talk = "Meow!"
}

class Dog extends Animal {
  def talk = "Woof!"
}

def hear(a: Animal): String = a.talk

hear(new Cat) //// => "Meow!"
hear(new Dog) //// => "Woof!"
#+END_SRC

* Ad hoc polymorphism

Ad hoc polymorphism is a kind of polymorphism in which polymorphic functions can be applied to
arguments of different types.

#+BEGIN_SRC scala
def add(x: Int, y: Int) = x + y
def add(x: String, y: String) = x + y

add(1, 2) //// => 3
add("a", "b") //// => "ab"
#+END_SRC

* Ad hoc polymorphism

Ad hoc polymorphism is a kind of polymorphism in which polymorphic functions can be applied to
arguments of different types.

#+BEGIN_SRC scala
def hear(c: Cat) = "Meow!"
def hear(c: Dog) = "Woof!"

hear(new Cat) //// => "Meow!"
hear(new Dog) //// => "Woof!"
#+END_SRC

* Type classes

Type classes were first introduced in Haskell and provide an additional way to support ad hoc
polymorphism. In Haskell, if a type is part of a type class, then it supports and implements the
behavior the type class describes.

There is no special syntax in Scala to express a type class, but we can achieve the same
functionality with constructs of the language.

#+BEGIN_SRC scala
trait Talker[A] {
  def talk(x: A): String
}

object Talker {
  val dogTalker: Talker[Dog] = new Talker[Dog] {
    def talk(x: Dog) = "Woof!"
  }

  val catTalker: Talker[Cat] = new Talker[Cat] {
    def talk(x: Cat) = "Meow!"
  }
}

Talker.dogTalker.talk(new Dog) //// => "Woof!"
Talker.catTalker.talk(new Cat) //// => "Meow!"
#+END_SRC

* Type classes

We can avoid calling the Talker's explicitly by making the Talker implicit in the hear method:

#+BEGIN_SRC scala
trait Talker[A] {
  def talk(x: A): String
}

object Talker {
  implicit val dogTalker: Talker[Dog] = new Talker[Dog] {
    def talk(x: Dog) = "Woof!"
  }

  implicit val catTalker: Talker[Cat] = new Talker[Cat] {
    def talk(x: Cat) = "Meow!"
  }
}

def hear[A](x: A)(implicit talker: Talker[A]) = talker.talk(x)

hear(new Dog) //// => "Woof!"
hear(new Cat) //// => "Meow!"
#+END_SRC

* Type classes

We can improve this by adding a way to call talk on instances that have a Talker type class:

#+BEGIN_SRC scala
implicit class TalkerOps[A: Talker](x: A) {
  def talk = implicitly[Talker[A]].talk(x)
}

(new Dog).talk //// => "Woof!"
(new Cat).talk //// => "Meow!"
#+END_SRC

* Running example

We're going to use Typesafe Config as a running example throughout this presentation, attempting to
create a type class based solution to read and write ConfigValues. The Typesafe Config classes can
be summarized in:

#+BEGIN_SRC java
public interface ConfigValue
abstract class ConfigNumber extends ConfigValue
final class ConfigDouble extends ConfigNumber
final class ConfigInt extends ConfigNumber
final class ConfigLong extends ConfigNumber
final class ConfigBoolean extends ConfigValue
abstract class ConfigString extends ConfigValue
public interface ConfigObject extends ConfigValue, Map<String, ConfigValue>
public interface ConfigList extends ConfigValue, List<ConfigValue>
#+END_SRC

* Running example

#+BEGIN_SRC scala
trait ConfigReader[A] {
  def read(configValue: ConfigValue): A
}

object ConfigReader {
  object Ops {
    implicit class ConfigReaderOps(x: ConfigValue) {
      def as[A: ConfigReader]: A =
        implicitly[ConfigReader[A]].read(x)
    }
  }
}
#+END_SRC

* Running example

#+BEGIN_SRC scala
trait ConfigWriter[A] {
  def write(value: A): ConfigValue
}

object ConfigWriter {
  object Ops {
    implicit class ConfigWriterOps[A: ConfigWriter](x: A) {
      def toConfig: ConfigValue =
        implicitly[ConfigWriter[A]].write(x)
    }
  }
}
#+END_SRC

* Basic readers

#+BEGIN_SRC scala
trait BasicReaders {
  implicit val intReader: ConfigReader[Int] = new ConfigReader[Int] {
    def read(configValue: ConfigValue): Int = configValue.unwrapped.asInstanceOf[Int]
  }

  implicit val longReader: ConfigReader[Long] = new ConfigReader[Long] {
    def read(configValue: ConfigValue): Long = configValue.unwrapped.asInstanceOf[Long]
  }

  implicit val doubleReader: ConfigReader[Double] = new ConfigReader[Double] {
    def read(configValue: ConfigValue): Double = configValue.unwrapped.asInstanceOf[Double]
  }

  implicit val stringReader: ConfigReader[String] = new ConfigReader[String] {
    def read(configValue: ConfigValue): String = configValue.unwrapped.asInstanceOf[String]
  }

  implicit val booleanReader: ConfigReader[Boolean] = new ConfigReader[Boolean] {
    def read(configValue: ConfigValue): Boolean = configValue.unwrapped.asInstanceOf[Boolean]
  }
}

object ConfigReader extends BasicReaders
#+END_SRC

* Basic readers

#+BEGIN_SRC scala
import ConfigReader.Ops._

val conf = ConfigFactory.parseString(
  """|{
     |  a = 1
     |  b = 1099511627776
     |  c = 4.5
     |  d = "str"
     |  e = false
     |}""".stripMargin)

conf.getValue("a").as[Int] //// => 1
conf.getValue("b").as[Long] //// => 1099511627776l
conf.getValue("c").as[Double] //// => 4.5
conf.getValue("d").as[String] //// => "str"
conf.getValue("e").as[Boolean] //// => false
#+END_SRC

* Basic writers

#+BEGIN_SRC scala
trait BasicWriters {
  implicit val intWriter: ConfigWriter[Int] = new ConfigWriter[Int] {
    def write(value: Int): ConfigValue = ConfigValueFactory.fromAnyRef(value)
  }

  implicit val longWriter: ConfigWriter[Long] = new ConfigWriter[Long] {
    def write(value: Long): ConfigValue = ConfigValueFactory.fromAnyRef(value)
  }

  implicit val doubleWriter: ConfigWriter[Double] = new ConfigWriter[Double] {
    def write(value: Double): ConfigValue = ConfigValueFactory.fromAnyRef(value)
  }

  implicit val stringWriter: ConfigWriter[String] = new ConfigWriter[String] {
    def write(value: String): ConfigValue = ConfigValueFactory.fromAnyRef(value)
  }

  implicit val booleanWriter: ConfigWriter[Boolean] = new ConfigWriter[Boolean] {
    def write(value: Boolean): ConfigValue = ConfigValueFactory.fromAnyRef(value)
  }
}

object ConfigWriter extends BasicWriters
#+END_SRC

* Basic writers

#+BEGIN_SRC scala
import ConfigWriter.Ops._

1.toConfig //// => ConfigInt(1)
1099511627776l.toConfig //// => ConfigLong(1099511627776)
4.5.toConfig //// => ConfigDouble(4.5)
"str".toConfig //// => Quoted("str")
false.toConfig //// => ConfigBoolean(false)
#+END_SRC

* Derivation of config readers

Building upon available readers and writers, we can start deriving type classes for collection
types:

#+BEGIN_SRC scala
import scala.collection.JavaConverters._
import scala.collection.generic.CanBuildFrom
import scala.language.higherKinds

trait CollectionReaders {
  implicit def traversableReader[A, F[A] <: TraversableOnce[A]](
    implicit
    reader: ConfigReader[A],
    cbf: CanBuildFrom[F[A], A, F[A]]): ConfigReader[F[A]] = new ConfigReader[F[A]] {
    def read(configValue: ConfigValue): F[A] =
      configValue.asInstanceOf[ConfigList].asScala.foldLeft(cbf()) {
        case (acc, x) => acc += reader.read(x)
      }.result()
  }
}

object ConfigReader extends CollectionReaders
#+END_SRC

* Derivation of config readers

#+BEGIN_SRC scala
val conf = ConfigFactory.parseString(
  """|{
     |  a = 1
     |  b = 1099511627776
     |  c = 4.5
     |  d = "str"
     |  e = false
     |  f = [1, 2, 3]
     |}""".stripMargin)

conf.getValue("f").as[List[Int]] //// => List(1, 2, 3)
conf.getValue("f").as[Set[Int]] //// => Set(1, 2, 3)
#+END_SRC

* Derivation of config readers

#+BEGIN_SRC scala
trait CollectionReaders {
  implicit def mapReader[A](
    implicit
    reader: ConfigReader[A]): ConfigReader[Map[String, A]] = new ConfigReader[Map[String, A]] {
    def read(configValue: ConfigValue): Map[String, A] = {
      val obj = configValue.asInstanceOf[ConfigObject]
      val keys = obj.keySet()
      keys.asScala.foldLeft(Map.empty[String, A]) {
        case (acc, k) => acc + (k -> reader.read(obj.get(k)))
      }
    }
  }
}
#+END_SRC

* Derivation of config readers

#+BEGIN_SRC scala
val conf = ConfigFactory.parseString(
  """|{
     |  a = 1
     |  b = 1099511627776
     |  c = 4.5
     |  d = "str"
     |  e = false
     |  f = [1, 2, 3]
     |  g {
     |    a = 1
     |    b = 2
     |    c = 3
     |  }
     |}""".stripMargin)

conf.getValue("g").as[Map[String, Int]] //// => Map("a" -> 1, "b" -> 2, "c" -> 3)
#+END_SRC

* Derivation of config writers

#+BEGIN_SRC scala
import scala.collection.JavaConverters._
import scala.language.higherKinds

trait CollectionWriters {
  implicit def traversableWriter[A, F[A] <: TraversableOnce[A]](
    implicit
    writer: ConfigWriter[A]): ConfigWriter[F[A]] = new ConfigWriter[F[A]] {
    def write(value: F[A]): ConfigValue =
      ConfigValueFactory.fromIterable(value.toList.map(writer.write).asJava)
  }

  implicit def mapWriter[A](
    implicit
    writer: ConfigWriter[A]): ConfigWriter[Map[String, A]] = new ConfigWriter[Map[String, A]] {
    def write(value: Map[String, A]): ConfigValue =
      ConfigValueFactory.fromMap(value.mapValues(writer.write).asJava)
  }
}

object ConfigWriter extends CollectionWriters
#+END_SRC

* Derivation of config writers

#+BEGIN_SRC scala
List(1, 2, 3).toConfig
//// => SimpleConfigList([1,2,3)]

Set(1, 2, 3).toConfig
//// => SimpleConfigList([1,2,3])

Map("a" -> 1, "b" -> 2, "c" -> 3).toConfig
//// => SimpleConfigObject({"a":1,"b":2,"c":3})

Map(
  "a" -> List(Map("k1" -> "v1")),
  "b" -> List(),
  "c" -> List(Map("k2" -> "v2", "k3" -> "v3")).toConfig
//// => SimpleConfigObject({"a":[{"k1":"v1"}],"b":[],"c":[{"k2":"v2","k3":"v3"}]})
#+END_SRC

* Derivation of type classes

#+BEGIN_SRC scala
case class RabbitMQ(host: String, port: Int, username: String, password: String, exchangeName: String)

val rabbitmqConf = ConfigFactory.parseString(
  """|{
     |  rabbitmq {
     |    host = "localhost"
     |    port = 5672
     |    username = "guest"
     |    password = "guest"
     |    exchangeName = "sf.data"
     |  }
     |}""".stripMargin)

rabbitmqConf.getValue("rabbitmq").as[RabbitMQ]
//// => could not find implicit value for evidence parameter of type
////    com.velocidi.ConfigReader[com.velocidi.Main.RabbitMQ]
////    :(
#+END_SRC

* Derivation of type classes

#+BEGIN_SRC scala
implicit val rabbitmqConfigReader: ConfigReader[RabbitMQ] = new ConfigReader[RabbitMQ] {
  def read(configValue: ConfigValue): RabbitMQ = {
    val obj = configValue.asInstanceOf[ConfigObject]
    RabbitMQ(
      obj.get("host").as[String],
      obj.get("port").as[Int],
      obj.get("username").as[String],
      obj.get("password").as[String],
      obj.get("defaultExchangeName").as[String])
  }
}

rabbitmqConf.getValue("rabbitmq").as[RabbitMQ]
//// => RabbitMQ(localhost,5672,guest,guest,sf.data)
#+END_SRC

* Shapeless

[[https://github.com/milessabin/shapeless][https://github.com/milessabin/shapeless]]

#+BEGIN_QUOTE
You must be shapeless, formless, like water. When you pour water in a cup, it becomes the cup. When
you pour water in a bottle, it becomes the bottle. When you pour water in a teapot, it becomes the
teapot. Water can drip and it can crash. Become like water my friend.
                                                                                       -- Bruce Lee
#+END_QUOTE

#+BEGIN_SRC scala
import shapeless._
import shapeless.labelled._
import shapeless.syntax.singleton._
#+END_SRC

* Singleton types

Shapeless adds support for singleton-typed literals via implicit macros.

#+BEGIN_SRC scala
23.narrow     //// : Int(42)       <: Int
"str".narrow  //// : String("str") <: String
'foo.narrow   //// : Symbol('foo)  <: Symbol
#+END_SRC

* Tagged values

Shapeless allows us to label values at the type level.

#+BEGIN_SRC scala
'a ->> 23     //// : Int with KeyTag[Symbol with Tagged[String("a")], Int]
'b ->> "str"  //// : String with KeyTag[Symbol with Tagged[String("b")], String]
'c ->> 'foo   //// : Symbol with KeyTag[Symbol with Tagged[String("c")], Symbol]
#+END_SRC

* Tagged values from the type level to the value level

The Witness type class allows us to pull labels from the type level to the value level.

#+BEGIN_SRC scala
def f[K, V](v: FieldType[K, V])(
  implicit
  witness: Witness.Aux[K]): (K, V) = witness.value -> v

F('a ->> "bar") //// => ('a, "bar")
#+END_SRC

* (The Aux pattern)

#+BEGIN_SRC scala
trait Witness {
  type T
}

object Witness {
  type Aux[T0] = Witness { type T = T0 }
}

//// Because the following doesn't compile
def f[V](v: FieldType[witness.T, V])(
  implicit
  witness: Witness): (witness.T, V) = witness.value -> v
#+END_SRC

* HLists

Shapeless allows us to build heterogeneous lists.

#+BEGIN_SRC scala
23 :: "str" :: 'foo :: HNil //// : Int :: String :: Symbol :: HNil
#+END_SRC

* HLists

We can have HLists of tagged types.

#+BEGIN_SRC scala
('a ->> 23) :: ('b ->> "str") :: ('c -> 'foo) :: HNil
//// : Int with KeyTag[Symbol with Tagged[String("a")],Int] ::
////   String with KeyTag[Symbol with Tagged[String("b")],String] ::
////   Symbol with KeyTag[Symbol with Tagged[String("c")],Symbol] ::
////   shapeless.HNil
#+END_SRC

* Shapes start to get similar

#+BEGIN_SRC scala
case class RabbitMQ(
  host: String,
  port: Int,
  username: String,
  password: String,
  defaultExchangeName: String)

RabbitMQ("localhost", 5672, "guest", "guest", "sf.data")

('host ->> "localhost") ::
  ('port ->> 5672) ::
  ('username ->> "guest") ::
  ('password ->> "guest") ::
  ('defaultExchangeName ->> "sf.data") ::
  HNil
#+END_SRC

* Deriving a config writer for HLists of tagged types

#+BEGIN_SRC scala
trait DerivedWriters {
  implicit val hNilWriter: ConfigWriter[HNil] = new ConfigWriter[HNil] {
    def write(value: HNil): ConfigValue = ConfigValueFactory.fromMap(Map.empty[String, Any].asJava)
  }

  implicit def hListWriter[K <: Symbol, H, T <: HList](
    implicit
    witness: Witness.Aux[K],
    hWriter: ConfigWriter[H],
    tWriter: ConfigWriter[T]): ConfigWriter[FieldType[K, H] :: T] =
    new ConfigWriter[FieldType[K, H] :: T] {
      def write(value: FieldType[K, H] :: T): ConfigValue = {
        val obj = tWriter.write(value.tail).asInstanceOf[ConfigObject]
        val key = witness.value.name
        obj.withValue(key, hWriter.write(value.head))
      }
    }
}

object ConfigWriter extends DerivedWriters
#+END_SRC

* Using our config writer for HLists of tagged types

#+BEGIN_SRC scala
val rmqHL =
  ('host ->> "localhost") ::
    ('port ->> 5672) ::
    ('username ->> "guest") ::
    ('password ->> "guest") ::
    ('defaultExchangeName ->> "sf.data") ::
    HNil

rmqHL.toConfig
//// => SimpleConfigObject({
////      "defaultExchangeName":"sf.data",
////      "host":"localhost",
////      "password":"guest",
////      "port":5672,
////      "username":"guest"
////    })
#+END_SRC

* Deriving a config reader for HLists of tagged types

#+BEGIN_SRC scala
trait DerivedReaders {
  implicit val hNilReader: ConfigReader[HNil] = new ConfigReader[HNil] {
    def read(configValue: ConfigValue): HNil = HNil
  }

  implicit def hListReader[K <: Symbol, H, T <: HList](
    implicit
    witness: Witness.Aux[K],
    hReader: ConfigReader[H],
    tReader: ConfigReader[T]): ConfigReader[FieldType[K, H] :: T] =
    new ConfigReader[FieldType[K, H] :: T] {
      def read(configValue: ConfigValue): FieldType[K, H] :: T = {
        val obj = configValue.asInstanceOf[ConfigObject]
        val key = witness.value.name
        val head = obj.get(key)
        field[K](hReader.read(head)) :: tReader.read(obj.withoutKey(key))
      }
    }
}

object ConfigReader extends DerivedReaders
#+END_SRC

* Can we convert between tagged HLists and Scala case classes?

#+BEGIN_SRC scala
case class RabbitMQ(
  host: String,
  port: Int,
  username: String,
  password: String,
  defaultExchangeName: String)

val rmq = RabbitMQ("localhost", 5672, "guest", "guest", "sf.data")

val rmqHL =
  ('host ->> "localhost") ::
    ('port ->> 5672) ::
    ('username ->> "guest") ::
    ('password ->> "guest") ::
    ('defaultExchangeName ->> "sf.data") ::
    HNil
#+END_SRC

* LabelledGeneric

LabelledGeneric allows us to convert between tagged HLists and Scala case classes.

#+BEGIN_SRC scala
case class RabbitMQ(
  host: String,
  port: Int,
  username: String,
  password: String,
  defaultExchangeName: String)

val generic = LabelledGeneric[RabbitMQ]
//// generic.Repr : String with KeyTag[Symbol with Tagged[String("host")], String] ::
////                Int with KeyTag[Symbol with Tagged[String("port")], Int] ::
////                String with KeyTag[Symbol with Tagged[String("username")], String] ::
////                String with KeyTag[Symbol with Tagged[String("password")], String] ::
////                String with KeyTag[Symbol with Tagged[String("defaultExchangeName")], String] ::
////                shapeless.HNil

generic.from(rmqHL) == rmq
generic.to(rmq) == rmqHL
#+END_SRC

* LabelledGeneric

We can now derive readers and writers for case classes.

#+BEGIN_SRC scala
trait DerivedReaders {
  implicit def productReader[A, Repr](
    implicit
    gen: LabelledGeneric.Aux[A, Repr],
    reprReader: ConfigReader[Repr]): ConfigReader[A] = new ConfigReader[A] {
    def read(configValue: ConfigValue): A =
      gen.from(reprReader.read(configValue))
  }
}

trait DerivedWriters {
  implicit def productWriter[A, Repr](
    implicit
    gen: LabelledGeneric.Aux[A, Repr],
    reprWriter: ConfigWriter[Repr]): ConfigWriter[A] = new ConfigWriter[A] {
    def write(value: A): ConfigValue = reprWriter.write(gen.to(value))
  }
}
#+END_SRC

* Generic derivation of readers and writers for case classes

#+BEGIN_SRC scala
val rabbitmqConf = ConfigFactory.parseString(
  """|{
     |  rabbitmq {
     |    host = "localhost"
     |    port = 5672
     |    username = "guest"
     |    password = "guest"
     |    defaultExchangeName = "sf.data"
     |  }
     |}""".stripMargin)

rabbitmqConf.getValue("rabbitmq").as[RabbitMQ]
//// => RabbitMQ(localhost,5672,guest,guest,sf.data)

val rmq = RabbitMQ("localhost", 5672, "guest", "guest", "sf.data")
rmq.toConfig
//// => SimpleConfigObject({
////      "defaultExchangeName":"sf.data",
////      "host":"localhost",
////      "password":"guest",
////      "port":5672,
////      "username":"guest"
////    })
#+END_SRC

* Working with sealed families

#+BEGIN_SRC scala
sealed trait KeyValueStore
case class InMemory(maxSize: Int) extends KeyValueStore
case class SqlBased(jdbcUrl: String, tableName: String) extends KeyValueStore

val keyValueStoreConf = ConfigFactory.parseString(
  """|{
     |  in-memory {
     |    maxSize = 2000
     |  }
     |
     |  sql-based {
     |    jdbcUrl = "jdbc:h2:mem:local;DB_CLOSE_DELAY=-1"
     |    tableName = "kv-store"
     |  }
     |}""".stripMargin)

keyValueStoreConf.getValue("in-memory").as[KeyValueStore]
//// Doesn't compile. :(
#+END_SRC

* Coproduct

Shapeless can represent sealed families in a Coproduct representation

#+BEGIN_SRC scala
sealed trait KeyValueStore
case class InMemory(maxSize: Int) extends KeyValueStore
case class SqlBased(jdbcUrl: String, tableName: String) extends KeyValueStore

val generic = LabelledGeneric[KeyValueStore]
//// generic.Repr : InMemory with KeyTag[Symbol with Tagged[String("InMemory")], InMemory] :+:
////                SqlBased with KeyTag[Symbol with Tagged[String("SqlBased")], SqlBased] :+:
////                shapeless.CNil

sealed trait Coproduct
sealed trait CNil extends Coproduct
sealed trait :+:[+H, +T <: Coproduct] extends Coproduct
final case class Inl[+H, +T <: Coproduct](head : H) extends :+:[H, T]
final case class Inr[+H, +T <: Coproduct](tail : T) extends :+:[H, T]
#+END_SRC

* Deriving config readers for coproducts

#+BEGIN_SRC scala
trait DerivedReaders {
  implicit val cNilReader: ConfigReader[CNil] = new ConfigReader[CNil] {
    def read(configValue: ConfigValue): CNil = ???
  }

  implicit def coproductReader[K <: Symbol, H, T <: Coproduct](
    implicit
    witness: Witness.Aux[K],
    hReader: ConfigReader[H],
    tReader: ConfigReader[T]): ConfigReader[FieldType[K, H] :+: T] =
    new ConfigReader[FieldType[K, H] :+: T] {
      def read(configValue: ConfigValue): FieldType[K, H] :+: T =
        Try(Inl(field[K](hReader.read(configValue)))).getOrElse(Inr(tReader.read(configValue)))
    }
}
#+END_SRC

* Deriving config readers for coproducts

#+BEGIN_SRC scala
sealed trait KeyValueStore
case class InMemory(maxSize: Int) extends KeyValueStore
case class SqlBased(jdbcUrl: String, tableName: String) extends KeyValueStore

val keyValueStoreConf = ConfigFactory.parseString(
  """|{
     |  in-memory {
     |    maxSize = 2000
     |  }
     |
     |  sql-based {
     |    jdbcUrl = "jdbc:h2:mem:local;DB_CLOSE_DELAY=-1"
     |    tableName = "kv-store"
     |  }
     |}""".stripMargin)

keyValueStoreConf.getValue("in-memory").as[KeyValueStore]
//// => InMemory(2000)

keyValueStoreConf.getValue("sql-based").as[KeyValueStore]
//// => SqlBased("jdbc:h2:mem:local;DB_CLOSE_DELAY=-1", "kv-store")
#+END_SRC

* Deriving config writers for coproducts

#+BEGIN_SRC scala
trait DerivedWriters {
  implicit val cNilWriter: ConfigWriter[CNil] = new ConfigWriter[CNil] {
    def write(value: CNil): ConfigValue = ???
  }

  implicit def coproductWriter[K <: Symbol, H, T <: Coproduct](
    implicit
    witness: Witness.Aux[K],
    hWriter: ConfigWriter[H],
    tWriter: ConfigWriter[T]): ConfigWriter[FieldType[K, H] :+: T] =
    new ConfigWriter[FieldType[K, H] :+: T] {
      def write(value: FieldType[K, H] :+: T): ConfigValue = value match {
        case Inl(head) => hWriter.write(head)
        case Inr(tail) => tWriter.write(tail)
      }
    }
}
#+END_SRC

* Deriving config writers for coproducts

#+BEGIN_SRC scala
sealed trait KeyValueStore
case class InMemory(maxSize: Int) extends KeyValueStore
case class SqlBased(jdbcUrl: String, tableName: String) extends KeyValueStore

val kvStore: KeyValueStore = InMemory(2000)
kvStore.toConfig
//// => SimpleConfigObject({"maxSize":2000})

val sqlStore: KeyValueStore = SqlBased("jdbc:h2:mem:local;DB_CLOSE_DELAY=-1", "kv-store")
sqlStore.toConfig
//// => SimpleConfigObject({"jdbcUrl":"jdbc:h2:mem:local;DB_CLOSE_DELAY=-1","tableName":"kv-store"})
#+END_SRC
