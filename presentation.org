#+TITLE: Type classes in Scala
#+SUBTITLE: Velocidi Tech Talks

#+AUTHOR: Joao Azevedo
#+EMAIL: joao.c.azevedo@gmail.com
#+DATE: November 16, 2018

* Outline

1. Polymorphism
2. Type classes
3. Running example
4. Derivation of type classes
5. Shapeless
6. Generic derivation of type classes
7. Configuring derivation
8. Automatic and semiautomatic derivation
9. Other resources

* Polymorphism

#+BEGIN_QUOTE
In computer science, a type class is a type system construct that supports ad hoc polymorphism. This
is achieved by adding constraints to type variables in parametrically polymorphic types. 
                                                                                        -- [[https://en.wikipedia.org/wiki/Type_class][Wikipedia]]
#+END_QUOTE

* Parametric polymorphism

When a function or data type can handle values uniformly without depending on their type.

#+BEGIN_SRC scala
def length[A](xs: List[A]) = xs match {
  case Nil => 0
  case _ :: t => 1 + length(t)
}
#+END_SRC

#+BEGIN_SRC scala
val l1: List[Int]    = List(1, 2, 3)
val l2: List[String] = List("a", "b", "c")
val l3: List[Double] = List(1.0, 2.0, 3.0)

length(l1) //// => 3
length(l2) //// => 3
length(l3) //// => 3
#+END_SRC

* Parametric polymorphism

When a function or data type can handle values uniformly without depending on their type.

#+BEGIN_SRC scala
sealed trait List[+A]
case object Nil extends List[Nothing]
case class Cons[A](head: A, tail: List[A]) extends List[A]
#+END_SRC

#+BEGIN_SRC scala
val l1: List[Int]    = Cons(1, Cons(2, Cons(3, Nil)))
val l2: List[String] = Cons("a", Cons("b", Cons("c", Nil)))
val l3: List[Double] = Cons(1.0, Cons(2.0, Cons(3.0, Nil)))
#+END_SRC

* Subtype polymorphism

Subtyping allows a function to take an object of a certain type, but also work correctly for
subtypes.

#+BEGIN_SRC scala
trait Animal {
  def talk: String
}

class Cat extends Animal {
  def talk = "Meow!"
}

class Dog extends Animal {
  def talk = "Woof!"
}
#+END_SRC

#+BEGIN_SRC scala
def hear(a: Animal): String = a.talk

hear(new Cat) //// => "Meow!"
hear(new Dog) //// => "Woof!"
#+END_SRC

* Ad hoc polymorphism

A kind of polymorphism in which polymorphic functions can be applied to arguments of different
types.

#+BEGIN_SRC scala
def add(x: Int, y: Int) = x + y
def add(x: String, y: String) = x + y
#+END_SRC

#+BEGIN_SRC scala
add(1, 2) //// => 3
add("a", "b") //// => "ab"
#+END_SRC

* Ad hoc polymorphism

A kind of polymorphism in which polymorphic functions can be applied to arguments of different
types.

#+BEGIN_SRC scala
def hear(c: Cat) = "Meow!"
def hear(c: Dog) = "Woof!"
#+END_SRC

#+BEGIN_SRC scala
hear(new Cat) //// => "Meow!"
hear(new Dog) //// => "Woof!"
#+END_SRC
